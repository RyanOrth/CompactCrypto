{"version":3,"sources":["constants/action-types.js","features/sideTable/sideTableSlice.js","features/graphViewTable/graphViewTableSlice.js","features/graph/CandlestickChart.js","features/navBar/NavbarElements.js","features/navBar/navBarSlice.js","features/dropDown/DropDownElements.js","features/dropDown/dropDownSlice.js","features/dropDown/DropDown.js","features/navBar/NavBar.js","features/sideTable/sideTableColumns.js","features/sideTable/SideTable.js","pages/index.js","features/tableViewTable/tableViewTableColumns.js","features/tableViewTable/tableViewTableSlice.js","features/tableViewTable/tableViewTable.js","pages/data-view.js","features/graphViewTable/graphViewTableColumns.js","features/graphViewTable/GraphViewTable.js","features/addRowInput/addRowButtonSlice.js","data/symbolToCrypto.js","features/addRowInput/addRowButton.js","pages/graph-view.js","features/checkBoxItem/checkBoxItemSlice.js","features/checkBoxItem/CheckBoxItem.js","pages/account.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js","features/checkBoxItem/CheckBoxItem.module.css","features/navBar/NavBar.module.css","features/dropDown/DropDown.module.css"],"names":["COMPACT_VIEW","DATA_VIEW","GRAPH_VIEW","ACCOUNT_VIEW","sideTableSlice","createSlice","name","initialState","selectedRow","selectedToken","reducers","setSelectedRow","sideTable","action","payload","setSelectedToken","actions","getSelectedRow","state","getSelectedToken","graphViewTableSlice","selectedCrypto","changeCrypto","graphViewTable","changeToken","getSelectedCryto","getGraphViewToken","CandlestickChart","props","data","compact_token","useSelector","graph_token","token","currentPage","objOfDays","jsonData","filter","x","SYMBOL","pop","console","log","Date","Math","min","apply","Object","keys","map","date","toISOString","substr","d","setDate","getDate","dayData","push","y","options","chart","id","toolbar","tools","download","customIcons","icon","index","title","class","click","e","size","width","height","xaxis","type","labels","showLabels","style","colors","datetimeFormatter","year","month","day","yaxis","series","Nav","styled","nav","NavLink","Link","NavMenu","FaBars","div","NavBtnLinkAccount","displayFilterOptions","displayGraphOptions","displaySearchBar","navBarSlice","updateCurrentPage","updateDisplayFilterOptions","updateDisplayGraphOptions","updateDisplaySearchBar","selectCurrentPage","navBar","selectDisplayFilterOptions","selectDisplayGraphOptions","selectDisplaySearchBar","DropDownMenu","DropDownBtn","dropDownSlice","items","value","defaultTitle","updateItems","updateDefaultTitle","updateValue","selectValue","dropDown","selectItems","DropDown","currentValue","dispatch","useDispatch","includes","className","styles","dropdown","dropbtn","item","onClick","activeStyle","NavBar","to","COLUMNS","Header","accessor","SideTable","selection","rowId","selectRow","columns","useMemo","tableInstance","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","values","background","color","cells","cell","getCellProps","CompactView","tableViewTableSlice","favoriteList","setFavoriteList","tableViewTable","getFavoriteList","TableViewTable","filterType","updateFavoriteList","useSortBy","HELPTEXT","getSortByToggleProps","undefined","float","isSorted","isSortedDesc","length","abs","n","DataView","display","justifyContent","alignItems","margin","GraphViewTable","json","require","symbols","Set","object","add","cryptocurrencies","rowData","Crypto","alignContent","addRowButtonSlice","isVisible","toggleVisibility","addRowButton","selectVisibility","symbolToCrypto","Map","symbol","set","AddRowButton","toggleSearch","names","i","position","onSelect","crypto","graphToken","entries","key","setCrypto","autoFocus","GraphView","checkBoxItemSlice","boxChecked","updateBoxChecked","updateOptions","updateItem","selectBoxChecked","checkBoxItem","selectItem","selectOptions","CheckBoxItem","updatedList","slice","Account","currentFavoriteList","for","favorite","App","basename","process","path","exact","component","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","store","configureStore","reducer","counter","counterReducer","dropDownReducer","navBarReducer","checkBoxItemReducer","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0bf0d25d.chunk.js","sourcesContent":["export const COMPACT_VIEW = \"Compact View\";\nexport const DATA_VIEW = \"Data View\";\nexport const GRAPH_VIEW = \"Graph View\";\nexport const ACCOUNT_VIEW = \"Account View\";","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst sideTableSlice = createSlice({\r\n  name: \"sideTable\",\r\n  initialState: {\r\n    selectedRow: '1',\r\n    selectedToken: 'BTC'\r\n  },\r\n  reducers: {\r\n    setSelectedRow: (sideTable, action) => {\r\n      const { selectedRow } = action.payload;\r\n      sideTable.selectedRow = selectedRow;\r\n    },\r\n    setSelectedToken: (sideTable, action) => {\r\n      const { selectedToken } = action.payload;\r\n      sideTable.selectedToken = selectedToken;\r\n    }\r\n  },\r\n});\r\n\r\nexport default sideTableSlice;\r\n\r\nexport const { setSelectedRow, setSelectedToken } = sideTableSlice.actions;\r\n\r\nexport function getSelectedRow(state) {\r\n  return state.sideTable.selectedRow;\r\n}\r\nexport function getSelectedToken(state) {\r\n  return state.sideTable.selectedToken;\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst graphViewTableSlice = createSlice({\r\n  name: \"graphViewTable\",\r\n  initialState: {\r\n    selectedCrypto: 'Bitcoin',\r\n    selectedToken: 'BTC',\r\n  },\r\n  reducers: {\r\n    changeCrypto: (graphViewTable, action) => {\r\n      graphViewTable.selectedCrypto = action.payload;\r\n    },\r\n    changeToken: (graphViewTable, action) => {\r\n      graphViewTable.selectedToken = action.payload;\r\n    }\r\n  },\r\n});\r\n\r\nexport default graphViewTableSlice;\r\n\r\nexport const { changeCrypto, changeToken } = graphViewTableSlice.actions;\r\n\r\nexport function getSelectedCryto(state) {\r\n  return state.graphViewTable.selectedCrypto;\r\n}\r\n\r\nexport function getGraphViewToken(state) {\r\n  return state.graphViewTable.selectedToken;\r\n}","import React from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport jsonData from '../../data/data.json';\r\nimport { getSelectedToken } from '../sideTable/sideTableSlice';\r\nimport { getGraphViewToken } from \"../graphViewTable/graphViewTableSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { BiHelpCircle } from 'react-icons/bi';\r\nimport './candleStick.css';\r\nexport const CandlestickChart = (props) => {\r\n  const data = [];\r\n  const compact_token = useSelector(getSelectedToken);\r\n  const graph_token = useSelector(getGraphViewToken);\r\n  const token = (props.currentPage === 'COMPACT_VIEW') ? compact_token : graph_token;\r\n  const objOfDays = jsonData.filter(x => x.SYMBOL === token).pop()['DATA'];\r\n  console.log(new Date(Math.min.apply(null, Object.keys(objOfDays).map((date) => {\r\n    return new Date(date);\r\n  }))).toISOString().substr(0, 10));\r\n  for (let d = new Date(Math.min.apply(null, Object.keys(objOfDays).map((date) => {\r\n    return new Date(date);\r\n  }))); d <= new Date('2021-10-23'); d.setDate(d.getDate() + 1)) {\r\n    const dayData = objOfDays[d.toISOString().substr(0, 10)];\r\n    data.push({\r\n      x: d.toISOString().substr(0, 10),\r\n      y: [dayData['open'], dayData['high'], dayData['low'], dayData['close']],\r\n    });\r\n  }\r\n  const state = {\r\n    options: {\r\n      chart: {\r\n        id: \"basic-bar\",\r\n        toolbar: {\r\n          tools: {\r\n            download: true,\r\n            customIcons: [{\r\n              icon: '<span>(?)</span>',//'<BiHelpCircle size=5  color=\"black\">',\r\n              index: 6,\r\n              title: 'Help',\r\n              class: 'custom-icon',\r\n              click: function (chart, options, e) {\r\n                console.log('click')\r\n              },\r\n\r\n            }],\r\n          },\r\n        },\r\n      },\r\n      size: {\r\n        x: props.width,\r\n        y: props.height,\r\n      },\r\n      // This section lets you define the properties for the x-axis. Many more at https://apexcharts.com/docs/options/xaxis/\r\n      xaxis: {\r\n        type: 'datetime',\r\n        labels: {\r\n          showLabels: true,\r\n          // format: 'yyyy MM dd',\r\n          style: {\r\n            colors: 'white'\r\n          },\r\n          datetimeFormatter: {\r\n            year: 'yyyy',\r\n            month: 'MMM \\'yy',\r\n            day: 'MMM dd'\r\n          }\r\n        }\r\n      },\r\n      // These are the y-axis options. They are set automatically so not much to change here\r\n      yaxis: {\r\n        labels: {\r\n          style: {\r\n            colors: 'white'\r\n          }\r\n        }\r\n      },\r\n    },\r\n    // This is where the data goes that is displayed. Format for x is 'HH:mm', and format for y is [Open, High, Low, Close]\r\n    series: [{\r\n      data,\r\n    }]\r\n  }\r\n\r\n\r\n  // const token = getSelectedToken();\r\n\r\n\r\n\r\n  return (\r\n    <Chart\r\n      options={state.options}\r\n      series={state.series}\r\n      type=\"candlestick\"\r\n      width={state.options.size.x}\r\n      height={state.options.size.y}\r\n    />\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\nexport class CandlestickChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      options: {\r\n        chart: {\r\n          id: \"basic-bar\"\r\n        },\r\n        size: {\r\n          x: props.width,\r\n          y: props.height,\r\n        },\r\n        // This section lets you define the properties for the x-axis. Many more at https://apexcharts.com/docs/options/xaxis/\r\n        xaxis: {\r\n          labels: {\r\n            showLabels: true,\r\n            format: 'HH:mm',\r\n            style: {\r\n              colors: 'white'\r\n            }\r\n          }\r\n        },\r\n        // These are the y-axis options. They are set automatically so not much to change here\r\n        yaxis: {\r\n          labels: {\r\n            style: {\r\n              colors: 'white'\r\n            }\r\n          }\r\n        }\r\n      },\r\n      // This is where the data goes that is displayed. Format for x is 'HH:mm', and format for y is [Open, High, Low, Close]\r\n      series: [{\r\n        data: this.getData(props.token)\r\n      }]\r\n    }\r\n  }\r\n  getData(token) {\r\n    // const token = getSelectedToken();\r\n    const data = [];\r\n    const objOfDays = jsonData.filter(x => x.SYMBOL === token).pop()['DATA'];\r\n    console.log(objOfDays);\r\n    for (let d = new Date('2021-10-10'); d <= new Date('2021-10-23'); d.setDate(d.getDate() + 1)) {\r\n      const dayData = objOfDays[d.toISOString().substr(0, 10)];\r\n      console.log(dayData);\r\n      data.push({\r\n        x: d.toISOString().substr(0, 10),\r\n        y: [dayData['open'], dayData['high'], dayData['low'], dayData['close']],\r\n      });\r\n    }\r\n    return data;\r\n  }\r\n  // This render function is what actually creates the chart.\r\n  render() {\r\n    return (\r\n      <Chart\r\n        options={this.state.options}\r\n        series={this.state.series}\r\n        type=\"candlestick\"\r\n        width={this.state.options.size.x}\r\n        height={this.state.options.size.y}\r\n      />\r\n    );\r\n  }\r\n}\r\n*/","import { findByLabelText } from '@testing-library/dom';\r\nimport { FaBars } from 'react-icons/fa';\r\nimport { NavLink as Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nexport const Nav = styled.nav`\r\n  background: #00AACC;\r\n  height: 85px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0.2rem calc((100vw - 1000px) / 2);\r\n  z-index: 12;\r\n  /* Third Nav */\r\n  /* justify-content: flex-start; */\r\n  `;\r\n\r\nexport const NavLink = styled(Link)`\r\n  color: #808080;\r\n  display: flex;\r\n  align-items: center;\r\n  text-decoration: none;\r\n  padding: 0 1rem;\r\n  height: 100%;\r\n  cursor: pointer;\r\n  &.active{\r\n    color: #000000;\r\n  }`;\r\n\r\nexport const Bars = styled(FaBars)`\r\n  display: none;\r\n  color: #808080;\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    transform: translate(-100%, 75%);\r\n    font-size: 1.8rem;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const NavMenu = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: -24px;\r\n  /* Second Nav */\r\n  /* margin-right: 24px; */\r\n  /* Third Nav */\r\n  /* width: 100vw;\r\n  white-space: nowrap; */\r\n  // @media screen and (max-width: 768px) {\r\n  //   display: none;\r\n  // }\r\n`;\r\n\r\nexport const NavBtn = styled.nav`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: 24px;\r\n  /* Third Nav */\r\n  /* justify-content: flex-end;\r\n  width: 100vw; */\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const NavBtnLink = styled(Link)`\r\n  border-radius: 4px;\r\n  background: #808080;\r\n  padding: 10px 22px;\r\n  color: #000000;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  text-decoration: none;\r\n  /* Second Nav */\r\n  margin-left: 24px;\r\n  &:hover {\r\n    transition: all 0.2s ease-in-out;\r\n    background: #fff;\r\n    color: #808080;\r\n  }\r\n`;\r\n\r\nexport const NavBtnLinkAccount = styled(Link)`\r\n  border-radius: 4px;\r\n  background: none;\r\n  padding: 10px 22px;\r\n  color: #585858;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  text-decoration: none;\r\n  /* Second Nav */\r\n  margin-left: 24px;\r\n  &:hover {\r\n    transition: all 0.2s ease-in-out;\r\n    background: none;\r\n    color: #808080;\r\n  }\r\n`;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport {\n  COMPACT_VIEW,\n  DATA_VIEW,\n  GRAPH_VIEW,\n  ACCOUNT_VIEW,\n} from \"../../constants/action-types\";\n\nconst initialState = {\n  currentPage: COMPACT_VIEW,\n  displayFilterOptions: false,\n  displayGraphOptions: false,\n  displaySearchBar: false,\n}\n\nexport const navBarSlice = createSlice({\n  name: 'navBar',\n  initialState,\n\n  reducers: {\n    updateCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    },\n    updateDisplayFilterOptions: (state, action) => {\n      state.displayFilterOptions = action.payload;\n    },\n    updateDisplayGraphOptions: (state, action) => {\n      state.displayGraphOptions = action.payload;\n    },\n    updateDisplaySearchBar: (state, action) => {\n      state.displaySearchBar = action.payload;\n    },\n  }\n});\n\nexport const { updateCurrentPage, updateDisplayFilterOptions, updateDisplayGraphOptions, updateDisplaySearchBar } = navBarSlice.actions;\n\nexport const selectCurrentPage = (state) => state.navBar.currentPage;\nexport const selectDisplayFilterOptions = (state) => state.navBar.displayFilterOptions;\nexport const selectDisplayGraphOptions = (state) => state.navBar.displayGraphOptions;\nexport const selectDisplaySearchBar = (state) => state.navBar.displaySearchBar;\n\nexport default navBarSlice.reducer;","import styled from 'styled-components';\n\nexport const DropDownMenu = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: -24px;\n  /* Second Nav */\n  /* margin-right: 24px; */\n  /* Third Nav */\n  /* width: 100vw;\n  white-space: nowrap; */\n  // @media screen and (max-width: 768px) {\n  //   display: none;\n  // }\n`;\n\nexport const DropDownBtn = styled.div`\n  color: #808080;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  padding: 0 1rem;\n  height: 100%;\n  cursor: pointer;\n  &.active{\n    color: #000000;\n  }`;","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  value: 'Filters',\r\n  defaultTitle: '',\r\n};\r\n\r\nexport const dropDownSlice = createSlice({\r\n  name: 'dropDown',\r\n  initialState,\r\n\r\n  reducers: {\r\n    updateItems: (state, action) => {\r\n      state.items = action.payload;\r\n    },\r\n    updateDefaultTitle: (state, action) => {\r\n      state.defaultTitle = action.payload;\r\n    },\r\n    updateValue: (state, action) => {\r\n      state.value = action.payload;\r\n    },\r\n  }\r\n});\r\n\r\nexport const { updateItems, updateDefaultTitle, updateValue } = dropDownSlice.actions;\r\n\r\nexport const selectValue = (state) => state.dropDown.value;\r\nexport const selectItems = (state) => state.dropDown.items;\r\nexport const selectDefaultTitle = (state) => state.dropDown.defaultTitle;\r\n\r\nexport default dropDownSlice.reducer;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  DropDownMenu,\r\n  DropDownBtn,\r\n} from './DropDownElements';\r\n\r\nimport {\r\n  selectItems,\r\n  selectDefaultTitle,\r\n  selectValue,\r\n  updateItems,\r\n  updateDefaultTitle,\r\n  updateValue,\r\n} from './dropDownSlice';\r\n\r\nimport styles from './DropDown.module.css';\r\n\r\nexport function DropDown(props) {\r\n  var currentValue = useSelector(selectValue);\r\n  var items = useSelector(selectItems);\r\n  const dispatch = useDispatch();\r\n\r\n  dispatch(updateItems(props.items));\r\n  dispatch(updateDefaultTitle(props.defaultTitle));\r\n\r\n  if(!props.items.includes(currentValue) || currentValue === ''){\r\n    currentValue = props.defaultTitle;\r\n    dispatch(updateValue(currentValue));\r\n  }\r\n\r\n  return (\r\n    <DropDownMenu>\r\n      <div className={styles.dropdown}>\r\n        <button className={styles.dropbtn}>{currentValue}</button>\r\n        <div className={styles['dropdown-content']}>\r\n          {items.map((item) => <DropDownBtn onClick={() => dispatch((item === 'None' ? updateValue(props.defaultTitle): updateValue(item)))} activeStyle>{item}</DropDownBtn>)}\r\n        </div>\r\n      </div>\r\n    </DropDownMenu>\r\n  );\r\n}","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IoPersonSharp } from 'react-icons/io5';\n\nimport {\n  Nav,\n  NavLink,\n  Bars,\n  NavMenu,\n  NavBtn,\n  NavBtnLink,\n  NavBtnLinkAccount,\n} from './NavbarElements';\n\nimport {\n  selectCurrentPage,\n  selectDisplayFilterOptions,\n  selectDisplayGraphOptions,\n  selectDisplaySearchBar,\n  updateCurrentPage,\n  updateDisplayFilterOptions,\n  updateDisplaySearchBar,\n} from './navBarSlice';\n\nimport styles from './NavBar.module.css';\nimport { Redirect, Switch } from 'react-router';\nimport {\n  COMPACT_VIEW,\n  DATA_VIEW,\n  GRAPH_VIEW,\n  ACCOUNT_VIEW,\n} from '../../constants/action-types';\n\nimport { DropDown } from '../dropDown/DropDown';\n\nexport function NavBar(props) {\n  var currentPage = useSelector(selectCurrentPage);\n  var displayFilterOptions = useSelector(selectDisplayFilterOptions);\n  var displayGraphOptions = useSelector(selectDisplayGraphOptions);\n  var displaySearchBar = useSelector(selectDisplaySearchBar);\n  const dispatch = useDispatch();\n\n  return (\n    <Nav>\n      <NavMenu>\n        <div className={styles.dropdown}>\n          <button className={styles.dropbtn}>{currentPage}</button>\n          <div className={styles['dropdown-content']}>\n            <NavLink to='/' activeStyle>\n              Compact View\n            </NavLink>\n            <NavLink to='/data-view' activeStyle>\n              Data View\n            </NavLink>\n            <NavLink to='/graph-view' activeStyle>\n              Graph View\n            </NavLink>\n            <NavLink to='/account' activeStyle>\n              Account\n            </NavLink>\n          </div>\n        </div>\n      </NavMenu>\n      {displayFilterOptions ? (<DropDown key={'dispayFilterOptions'} defaultTitle={'Filters'} items={['Favorites', 'High Risk', 'Safe Bet', 'Popular Picks', 'None']} />) : null}\n      {displayGraphOptions ? (<DropDown key={'displaySearchBar'} defaultTitle={'Graph Options'} items={[\"Today's View\", 'Historical View']} />) : null}\n      <NavBtnLinkAccount to='/account'> <IoPersonSharp size={50} /> </NavBtnLinkAccount>\n    </Nav>\n  );\n}\n\n","export const COLUMNS = [\r\n\t{\r\n\t\tHeader: 'Symbol',\r\n\t\taccessor: 'SYMBOL',\r\n\t},\r\n\t{\r\n\t\tHeader: 'Value',\r\n\t\taccessor: 'DATA.2021-10-23.close'\r\n\t},\r\n\t{\r\n\t\tHeader: 'Gain/Loss',\r\n\t\taccessor: 'DATA.2021-10-23.gain_loss',\r\n\t},\r\n]\r\n\r\n","import React, { useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTable } from \"react-table\";\r\nimport jsonData from '../../data/data.json';\r\nimport { COLUMNS } from \"./sideTableColumns\";\r\nimport { getSelectedRow, setSelectedRow, setSelectedToken } from \"./sideTableSlice\";\r\n// import './sideTableStyle.css';\r\n\r\nexport const SideTable = () => {\r\n  // current row/currency to display on graph\r\n  const selectedRow = useSelector(getSelectedRow);\r\n  // const selectedToken = useSelector(getSelectedToken);\r\n  const dispatch = useDispatch();\r\n\r\n  const selectRow = (selectedRow) =>\r\n    dispatch(\r\n      setSelectedRow({\r\n        selectedRow,\r\n      })\r\n    );\r\n  const selectToken = (selectedToken) =>\r\n    dispatch(\r\n      setSelectedToken({\r\n        selectedToken,\r\n      })\r\n    );\r\n  const selection = (rowId, token) => {\r\n    selectRow(rowId);\r\n    selectToken(token);\r\n  }\r\n  // memoizing columns and data to prevent react from reloading json every frame\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => jsonData, []);\r\n  // Stuff for react-table:setting columns and data\r\n  const tableInstance = useTable({\r\n    columns,\r\n    data\r\n  });\r\n  // Getting properties from react-table to be able to successfully display table\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n  // returning table\r\n  return (\r\n    <table className={'sideTable'}{...getTableProps()}>\r\n      <thead>\r\n        {\r\n          headerGroups.map(headerGroup => (\r\n            <tr className={'tableHeaderRow'} {...headerGroup.getHeaderGroupProps()} >\r\n              {\r\n                headerGroup.headers.map(column => (\r\n                  <th className={'sideTableth'}{...column.getHeaderProps()} style={{\r\n                  }}\r\n                    /* onClick={() => console.log()}*/ >\r\n                    {\r\n                      column.render('Header')\r\n                    }\r\n                  </th>\r\n                ))\r\n              }\r\n            </tr>\r\n          ))\r\n        }\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {\r\n          rows.map(row => {\r\n            prepareRow(row)\r\n            return (// Here change color if clicked and runs onclick\r\n              <tr className={'sideTabletr'}{...row.getRowProps()} onClick={() => selection(row.id, row.values['SYMBOL'])} style={{\r\n                background: row.id === selectedRow ? '#00afec' : 'white',\r\n                color: row.id === selectedRow ? 'white' : 'black'\r\n              }}>\r\n                {\r\n                  row.cells.map((cell) => {// Here is changing cell color based on value\r\n                    return <td className={'sideTabletd'}{...cell.getCellProps()} /*onClick={() => console.log(cell)}*/ style={{\r\n                      background: cell.column.Header === 'Gain/Loss' ? cell.value > 0 ? `rgb(50, 125, 0)` : `rgb(150,40,40)` : null,\r\n                    }}>\r\n                      {cell.render('Cell')}\r\n                    </td>\r\n                  })\r\n                }\r\n              </tr>\r\n            )\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { COMPACT_VIEW } from '../constants/action-types';\r\nimport { CandlestickChart } from '../features/graph/CandlestickChart';\r\nimport { NavBar } from '../features/navBar/NavBar';\r\nimport {\r\n  selectCurrentPage, updateCurrentPage,\r\n  updateDisplayFilterOptions,\r\n  updateDisplayGraphOptions,\r\n  updateDisplaySearchBar\r\n} from '../features/navBar/navBarSlice';\r\nimport { SideTable } from '../features/sideTable/SideTable';\r\nimport { getSelectedToken } from '../features/sideTable/sideTableSlice';\r\nimport styles from './screenCSS/compactView.css';\r\n\r\n\r\n\r\nconst CompactView = () => {\r\n  var currentPage = useSelector(selectCurrentPage);\r\n  let currentToken = useSelector(getSelectedToken);\r\n  const dispatch = useDispatch();\r\n\r\n  dispatch(updateCurrentPage(COMPACT_VIEW));\r\n  dispatch(updateDisplayFilterOptions(false));\r\n  dispatch(updateDisplayGraphOptions(false));\r\n  dispatch(updateDisplaySearchBar(false));\r\n\r\n  return (\r\n    <div>\r\n      <NavBar currentPage={COMPACT_VIEW} displayFilterOptions={false} displayGraphOptions={false} displaySearchBar={false} />\r\n      <div>\r\n\r\n        <div className={'page'}>\r\n          <div id={'tbbl'}>\r\n            <SideTable />\r\n          </div>\r\n          <div className={'candleStickChart'}>\r\n            <CandlestickChart width={'100%'} height={'100%'} currentPage={'COMPACT_VIEW'} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default CompactView;","export const COLUMNS = [\r\n\t{\r\n\t\tHeader: 'Favorite',\r\n\t},\r\n\t{\r\n\t\tHeader: 'Symbol',\r\n\t\taccessor: 'SYMBOL',\r\n\t},\r\n\t{\r\n\t\tHeader: 'Name',\r\n\t\taccessor: 'TOKEN',\r\n\t},\r\n\t{\r\n\t\tHeader: 'Value',\r\n\t\taccessor: 'DATA.2021-10-23.close',\r\n\t},\r\n\t{\r\n\t\tHeader: 'Gain/Loss',\r\n\t\taccessor: 'DATA.2021-10-23.gain_loss',\r\n\t},\r\n\t{\r\n\t\tHeader: 'Volume',\r\n\t\taccessor: 'DATA.2021-10-23.volume',\r\n\t},\r\n\t{\r\n\t\tHeader: 'Trade Amount',\r\n\t\taccessor: 'DATA.2021-10-23.trade_count',\r\n\t},\r\n]","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tableViewTableSlice = createSlice({\r\n  name: \"tableViewTable\",\r\n  initialState: {\r\n    favoriteList: [],\r\n  },\r\n  reducers: {\r\n    setFavoriteList: (tableViewTable, action) => {\r\n      const { favoriteList } = action.payload;\r\n      tableViewTable.favoriteList = favoriteList;\r\n    }\r\n    // pushFavorite: (tableViewTable, action) => {\r\n    //   const { favoriteItem } = action.payload;\r\n    //   tableViewTable.favoriteList.add(favoriteItem);\r\n    // },\r\n    // popFavorite: (tableViewTable, action) => {\r\n    //   const { removeItem } = action.payload;\r\n    //   tableViewTable.favoriteList.delete(removeItem);\r\n    // },\r\n  },\r\n});\r\nexport default tableViewTableSlice;\r\n\r\nexport const { setFavoriteList } = tableViewTableSlice.actions;\r\n// export const { pushFavorite, popFavorite } = tableViewTableSlice.actions;\r\n\r\nexport function getFavoriteList(state) {\r\n  // console.log(typeof state.tableViewTable.favoriteList);\r\n  return state.tableViewTable.favoriteList;\r\n}","import { useMemo } from \"react\";\r\nimport { IoStar, IoStarOutline } from 'react-icons/io5';\r\nimport { TiArrowSortedDown, TiArrowSortedUp, TiArrowUnsorted } from 'react-icons/ti';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useSortBy, useTable } from \"react-table\";\r\nimport jsonData from \"../../data/data.json\";\r\nimport { COLUMNS } from \"./tableViewTableColumns\";\r\nimport { getFavoriteList, setFavoriteList } from \"./tableViewTableSlice\";\r\nimport { selectValue } from \"../dropDown/dropDownSlice\";\r\n// import './tableViewTableCSS.css';\r\n\r\n\r\n\r\nexport const TableViewTable = () => {\r\n\r\n  const favoriteList = useSelector(getFavoriteList);\r\n  const filterType = useSelector(selectValue);\r\n  const dispatch = useDispatch();\r\n\r\n  const updateFavoriteList = (favoriteList) =>\r\n    dispatch(\r\n      setFavoriteList({\r\n        favoriteList,\r\n      })\r\n    )\r\n\r\n  // const addFavorite = (favorite) =>\r\n  //   dispatch(\r\n  //     pushFavorite({\r\n  //       favorite,\r\n  //     })\r\n  //   );\r\n  // const deleteFavorite = (favorite) =>\r\n  //   dispatch(\r\n  //     popFavorite({\r\n  //       favorite,\r\n  //     })\r\n  //   );\r\n\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => jsonData, []);\r\n\r\n  const tableInstance = useTable({\r\n    columns,\r\n    data\r\n  }, useSortBy);\r\n\r\n  const HELPTEXT = {\r\n    \"Symbol\": \"This is a unique set of letters to identify each crypto. Mainly used for security purposes\",\r\n    \"Favorite\": \"Save Crypto Currencies for later\",\r\n    \"Name\": \"Name of the cryptocurrency\",\r\n    \"Value\": \"Current price of the crypto in USD\",\r\n    \"Gain/Loss\": \"This is the percent that the value of the currency has changed in the last 24 hours\",\r\n    \"Volume\": \"This is the amount of the currency traded in the past 24 hours. Note: giving someone $5 would be a volume of 5\",\r\n    \"Trade Amount\": \"This is the amount of trades in a currency that occured in the past 24 hours. Note: giving someone $5 would be a trade amount of 1\",\r\n  };\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n  // console.log(filterType);\r\n  return (\r\n    <table className={'tableViewTable'} {...getTableProps()}>\r\n      <thead>\r\n        {\r\n          headerGroups.map(headerGroup => (\r\n            <tr className={'tableHeaderRow'} {...headerGroup.getHeaderGroupProps()}>\r\n              {\r\n                headerGroup.headers.map(column => (\r\n                  <th className={'tableViewTableth tooltip'}{...column.getHeaderProps(column.getSortByToggleProps({ title: undefined }))}>\r\n                    {column.render('Header')}\r\n                    {\r\n                      (column.Header !== 'Favorite') ?\r\n                        <span style={{ float: 'right' }}>\r\n                          {\r\n                            column.isSorted ? (column.isSortedDesc ?\r\n                              <TiArrowSortedDown size={20} color={'black'} /> :\r\n                              <TiArrowSortedUp size={20} color={'black'} />\r\n                            ) : <TiArrowUnsorted size={20} color={'black'} />\r\n                          }\r\n                        </span> : ''\r\n                    }\r\n                    <span className={'tooltiptext'}> {\r\n                      HELPTEXT[column.Header]\r\n                    }\r\n                    </span>\r\n                  </th>\r\n                ))\r\n              }\r\n            </tr>\r\n          ))\r\n        }\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {\r\n          rows.map(row => {\r\n            prepareRow(row)\r\n            // console.log(filterType) \r\n            return (// Here change color if clicked and runs onclick\r\n              (\r\n                filterType === \"Filters\"\r\n                || (filterType === 'Favorites' && (favoriteList.includes(row.values.SYMBOL) || favoriteList.length === 0))\r\n                || (filterType === 'High Risk' && Math.abs(row.values['DATA.2021-10-23.gain_loss']) > 7)\r\n                || (filterType === 'Safe Bet' && 2 < row.values['DATA.2021-10-23.gain_loss'] && row.values['DATA.2021-10-23.gain_loss'] < 5)\r\n                || (filterType === 'Popular Picks' && row.values['DATA.2021-10-23.trade_count'] > 30000)\r\n              ) ?\r\n                <tr className={'tableViewTabletr'} {...row.getRowProps()}>\r\n                  {\r\n                    row.cells.map((cell) => {// Here is changing cell color based on value\r\n                      return <td className={'tableViewTabletd'} {...cell.getCellProps()} style={{\r\n                        background: cell.column.Header === 'Gain/Loss' ? cell.value > 0 ? `rgb(50, 125, 0)` : `rgb(150,40,40)` : null,\r\n                      }}>\r\n                        {(cell.column.Header !== 'Favorite') ?\r\n                          cell.render('Cell') :\r\n                          (favoriteList.includes(cell.row.values['SYMBOL'])) ?\r\n                            <IoStar size={30} color={'red'} onClick={() => updateFavoriteList([...favoriteList].filter(n => n !== cell.row.values['SYMBOL']))} /> :\r\n                            <IoStarOutline size={30} color={'black'} onClick={() => updateFavoriteList([...favoriteList, cell.row.values['SYMBOL']])} />}\r\n                      </td>\r\n                    })\r\n                  }\r\n                </tr>\r\n                : ''\r\n            )\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DATA_VIEW } from '../constants/action-types';\r\nimport { NavBar } from '../features/navBar/NavBar.js';\r\nimport {\r\n  selectCurrentPage, updateCurrentPage,\r\n  updateDisplayFilterOptions,\r\n  updateDisplayGraphOptions,\r\n  updateDisplaySearchBar\r\n} from '../features/navBar/navBarSlice';\r\nimport { TableViewTable } from '../features/tableViewTable/tableViewTable';\r\nimport './screenCSS/tableView.css';\r\n\r\n\r\n\r\n\r\nconst DataView = () => {\r\n  var currentPage = useSelector(selectCurrentPage);\r\n  const dispatch = useDispatch();\r\n\r\n  dispatch(updateCurrentPage(DATA_VIEW));\r\n  dispatch(updateDisplayFilterOptions(true));\r\n  dispatch(updateDisplayGraphOptions(false));\r\n  dispatch(updateDisplaySearchBar(true));\r\n\r\n  return (\r\n    <div>\r\n      <NavBar currentPage={DATA_VIEW} displayFilterOptions={false} displayGraphOptions={false} displaySearchBar={false} />\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'Right',\r\n          alignItems: 'Right',\r\n          height: '10vh'\r\n        }}\r\n      >\r\n      </div>\r\n      <div style={{\r\n        margin: 'auto',\r\n      }}>\r\n        <TableViewTable />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataView;","export const COLUMNS = [\r\n{\r\n    Header: 'Cryptocurrency',\r\n    accessor: 'Crypto',\r\n  }\r\n]","import React, { useMemo } from \"react\";\r\nimport { useTable } from \"react-table\";\r\nimport { COLUMNS } from \"./graphViewTableColumns\";\r\nimport './graphViewTableStyle.css';\r\nimport { useSelector } from \"react-redux\";\r\nimport { getSelectedCryto } from \"./graphViewTableSlice\";\r\n\r\nexport const GraphViewTable = () => {\r\n  const selectedCrypto = useSelector(getSelectedCryto);\r\n\r\n  //eslint-disable-next-line\r\n  const fs = require('fs');\r\n  const json = require('../../data/data.json');\r\n  const symbols = new Set();\r\n  for (const object of json) {\r\n    symbols.add(object.SYMBOL);\r\n  }\r\n  const cryptocurrencies = require('cryptocurrencies');\r\n\r\n  let rowData = useMemo(() => [], []);\r\n  for (const symbol of symbols) {\r\n    const row = { Crypto: cryptocurrencies[symbol] };\r\n    rowData.push(row);\r\n  }\r\n  // memoizing columns and data to prevent react from reloading json every frame\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => rowData, [rowData]);\r\n  // Stuff for react-table:setting columns and data\r\n  const tableInstance = useTable({\r\n    columns,\r\n    data\r\n  });\r\n  // Getting properties from react-table to be able to successfully display table\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\r\n  // returning table\r\n  return (\r\n    <table className={'graphTable'} {...getTableProps()}>\r\n      <thead style={{\r\n        alignContent: 'center'\r\n      }}>\r\n        {\r\n          headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {\r\n                headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps()} className={'graphTableHeader'}>\r\n                    {column.render('Header')}\r\n                  </th>\r\n                ))\r\n              }\r\n            </tr>\r\n          ))\r\n        }\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {\r\n          rows.map(row => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()} style={{\r\n                display: selectedCrypto === row.values['Crypto'] ? 'inline' : 'none',\r\n              }}>\r\n                {\r\n                  row.cells.map((cell) => {\r\n                    return <td className={'graphTableCell'}{...cell.getCellProps()}>\r\n                      {\r\n                        cell.render('Cell')\r\n                      }\r\n                    </td>\r\n                  })\r\n                }\r\n              </tr>\r\n            )\r\n          })\r\n        }\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst addRowButtonSlice = createSlice({\r\n  name: \"addRowButton\",\r\n  initialState: {\r\n    isVisible : false,\r\n  },\r\n  reducers: {\r\n    toggleVisibility: (addRowButton, action) => {\r\n      addRowButton.isVisible = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport default addRowButtonSlice;\r\n\r\nexport const { toggleVisibility } = addRowButtonSlice.actions;\r\n\r\nexport function getVisibility(state) {\r\n  console.log('isVisible: ', state.addRowButton.isVisible)\r\n  return state.addRowButton.isVisible;\r\n}\r\n\r\nexport const selectVisibility = (state) => state.addRowButton.isVisible;\r\n","//eslint-disable-next-line\r\nconst fs = require('fs');\r\n  const json = require('./data.json');\r\n  const symbols = new Set();\r\n  for (const object of json) {\r\n    symbols.add(object.SYMBOL);\r\n  }\r\n  const cryptocurrencies = require('cryptocurrencies');\r\n  const symbolToCrypto = new Map();\r\n  for (const symbol of symbols) {\r\n    symbolToCrypto.set(symbol, cryptocurrencies[symbol]);\r\n  }\r\n\r\nexport default symbolToCrypto;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectVisibility, toggleVisibility } from \"./addRowButtonSlice\";\r\nimport { changeCrypto, changeToken } from \"../graphViewTable/graphViewTableSlice\";\r\nimport symbolToCrypto from \"../../data/symbolToCrypto\";\r\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\r\n\r\nexport const AddRowButton = () => {\r\n  const isVisible = useSelector(selectVisibility);\r\n  const dispatch = useDispatch();\r\n\r\n  const toggleSearch = () => {\r\n    dispatch(toggleVisibility(isVisible ? false : true));\r\n  }\r\n\r\n  const setCrypto = (item) => {\r\n    const crypto = item;\r\n    let graphToken = '';\r\n    for (let [key, value] of symbolToCrypto.entries()) {\r\n      if (value === item)\r\n        graphToken = key;\r\n    }\r\n    dispatch(changeCrypto(crypto));\r\n    dispatch(changeToken(graphToken));\r\n  }\r\n\r\n  const names = [...symbolToCrypto.values()];\r\n  const items = [];\r\n  for (let i = 0; i < symbolToCrypto.size; i++) {\r\n    items.push(\r\n      {\r\n        id: i,\r\n        name: names[i],\r\n      }\r\n    )\r\n  }\r\n\r\n  const handleOnSelect = (item) => {\r\n      toggleSearch();\r\n      setCrypto(item.name);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isVisible ?\r\n      <div style={{ width: 200, position: 100 }}>\r\n          <ReactSearchAutocomplete\r\n            items={items}\r\n            onSelect={handleOnSelect}\r\n            autoFocus\r\n          />\r\n        </div>\r\n      : null}\r\n      <button onClick={ () => toggleSearch() }>\r\n        Change Crypto\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { GRAPH_VIEW } from '../constants/action-types';\r\nimport { CandlestickChart } from '../features/graph/CandlestickChart';\r\nimport { GraphViewTable } from '../features/graphViewTable/GraphViewTable';\r\nimport { AddRowButton } from '../features/addRowInput/addRowButton';\r\nimport './screenCSS/graphView.css';\r\n\r\nimport { NavBar } from '../features/navBar/NavBar';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  selectCurrentPage,\r\n  selectDisplayFilterOptions,\r\n  selectDisplaySearchBar,\r\n  updateCurrentPage,\r\n  updateDisplayFilterOptions,\r\n  updateDisplayGraphOptions,\r\n  updateDisplaySearchBar,\r\n} from '../features/navBar/navBarSlice';\r\n\r\nconst GraphView = () => {\r\n\tvar currentPage = useSelector(selectCurrentPage);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tdispatch(updateCurrentPage(GRAPH_VIEW));\r\n  dispatch(updateDisplayFilterOptions(false));\r\n  dispatch(updateDisplayGraphOptions(true));\r\n  dispatch(updateDisplaySearchBar(true));\r\n\r\n  return (\r\n    <div >\r\n      <NavBar currentPage={GRAPH_VIEW} displayFilterOptions={false} displayGraphOptions={true} displaySearchBar={true} />\r\n\t\t\t<div className={'page'}>\r\n\t\t\t\t<div className={'tableAndButton'}>\r\n\t\t\t\t\t<div className={'graphViewTable'}>\r\n\t\t\t\t\t\t<GraphViewTable />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<AddRowButton/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={'graph'}>\r\n            <CandlestickChart />\r\n          </div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GraphView;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  boxChecked: false,\n  item: '',\n  options: [false, false, false],\n};\n\nexport const checkBoxItemSlice = createSlice({\n  name: 'checkBoxItem',\n  initialState,\n\n  reducers: {\n    updateBoxChecked: (state, action) => {\n      state.boxChecked = action.payload;\n    },\n    updateOptions: (state, action) => {\n      state.options = action.payload;\n    },\n    updateItem: (state, action) => {\n      state.item = action.payload;\n    },\n  }\n});\n\nexport const { updateBoxChecked, updateItem, updateOptions } = checkBoxItemSlice.actions;\n\nexport const selectBoxChecked = (state) => state.checkBoxItem.boxChecked;\nexport const selectItem = (state) => state.checkBoxItem.item;\nexport const selectOptions = (state) => state.checkBoxItem.options;\n\nexport default checkBoxItemSlice.reducer;","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport styles from './CheckBoxItem.module.css';\n\nimport { FaSquare, FaCheckSquare } from 'react-icons/fa';\n\nimport {\n  selectBoxChecked,\n  selectItem,\n  selectOptions,\n  updateBoxChecked,\n  updateItem,\n  updateOptions,\n} from './checkBoxItemSlice';\n\nexport function CheckBoxItem(props) {\n  var boxChecked = useSelector(selectBoxChecked);\n  var item = useSelector(selectItem);\n  var options = useSelector(selectOptions);\n  const dispatch = useDispatch();\n\n  var updatedList = [...options.slice(0,props.id), !options[props.id], ...options.slice(props.id+1)];\n  return (\n    options[props.id] ? (\n      <div className={styles['check-box-item']}><FaCheckSquare className={styles['checkbox']} onClick={() => dispatch(updateOptions(updatedList))}></FaCheckSquare>{props.item}</div>) \n      : (<div className={styles['check-box-item']}><FaSquare className={styles['checkbox']} onClick={() => dispatch(updateOptions(updatedList))}></FaSquare>{props.item}</div>)\n  );\n}","import React from 'react';\r\nimport { ACCOUNT_VIEW } from '../constants/action-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  selectCurrentPage,\r\n  selectDisplayFilterOptions,\r\n  selectDisplaySearchBar,\r\n  updateCurrentPage,\r\n  updateDisplayFilterOptions,\r\n  updateDisplayGraphOptions,\r\n  updateDisplaySearchBar,\r\n} from '../features/navBar/navBarSlice';\r\n\r\nimport { NavBar } from '../features/navBar/NavBar';\r\nimport './screenCSS/account.css';\r\n\r\nimport { getFavoriteList, setFavoriteList } from \"../features/tableViewTable/tableViewTableSlice\";\r\nimport { IoStar } from 'react-icons/io5';\r\nimport { FaSquare, FaCheckSquare } from 'react-icons/fa';\r\nimport { CheckBoxItem } from '../features/checkBoxItem/CheckBoxItem';\r\n\r\nconst Account = () => {\r\n  var currentPage = useSelector(selectCurrentPage);\r\n  const favoriteList = useSelector(getFavoriteList);\r\n  const dispatch = useDispatch();\r\n\r\n  let currentFavoriteList = favoriteList.slice();\r\n\r\n  dispatch(updateCurrentPage(ACCOUNT_VIEW));\r\n  dispatch(updateDisplayFilterOptions(false));\r\n  dispatch(updateDisplayGraphOptions(false));\r\n  dispatch(updateDisplaySearchBar(false));\r\n\r\n  const updateFavoriteList = (favoriteList) =>\r\n    dispatch(\r\n      setFavoriteList({\r\n        favoriteList,\r\n      })\r\n    )\r\n\r\n  return (\r\n    <div>\r\n      <NavBar currentPage={ACCOUNT_VIEW} displayFilterOptions={false} displayGraphOptions={false} displaySearchBar={false} />\r\n      <div className={'page'}>\r\n        <div className={'panels'}>\r\n          <div className={'panel'}>\r\n            <div>\r\n              <label>Email Notifications</label>\r\n\r\n            </div>\r\n            <div>\r\n              <label for='fEmail'>Email Address</label>\r\n              <input></input>\r\n            </div>\r\n            <button>Click for Email Notifications</button>\r\n          </div>\r\n\r\n          <div className={'panel'}>\r\n            <div>\r\n              <label>Favorites</label>\r\n\r\n            </div>\r\n            <div>\r\n              {(currentFavoriteList.length > 0) ?\r\n                currentFavoriteList.map((favorite) => <div className={'favorite'}> <IoStar onClick={() => updateFavoriteList(currentFavoriteList.filter(item => item !== favorite))}></IoStar> {favorite} </div>)\r\n                : (<div>No current favorites</div>)}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={'panel'}>\r\n            <dive>\r\n              <label>Types of Cryptocurrencies for Notifications</label>\r\n            </dive>\r\n            <div className={'notification-list'}>\r\n              <CheckBoxItem id={0} key={'checkbox1'} boxChecked={false} item={'Changes to Favorites'}/>\r\n              <CheckBoxItem id={1} key={'checkbox2'} boxChecked={false} item={'Quick Decrease'}/>\r\n              <CheckBoxItem id={2} key={'checkbox3'} boxChecked={false} item={'Quick Increase'}/>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './features/navBar';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'; // Web Implementation\r\n// import { HashRouter as Router, Switch, Route } from 'react-router-dom'; // Desktop Implementation, switch comments before building distribution\r\nimport CompactView from './pages';\r\nimport DataView from './pages/data-view';\r\nimport GraphView from './pages/graph-view';\r\nimport Account from './pages/account';\r\n\r\nfunction App() {\r\n  return (\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    //     <Counter />\r\n    //   </header>\r\n    // </div>\r\n    <div className=\"App\">\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route path='/' exact component={CompactView} />\r\n          <Route path='/data-view' component={DataView} />\r\n          <Route path='/graph-view' component={GraphView} />\r\n          <Route path='/account' component={Account} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport graphViewTableSlice from '../features/graphViewTable/graphViewTableSlice';\r\nimport sideTableSlice from '../features/sideTable/sideTableSlice';\r\nimport dropDownReducer from '../features/dropDown/dropDownSlice';\r\nimport navBarReducer from '../features/navBar/navBarSlice';\r\nimport tableViewTableSlice from '../features/tableViewTable/tableViewTableSlice';\r\nimport addRowButtonSlice from '../features/addRowInput/addRowButtonSlice';\r\nimport checkBoxItemReducer from '../features/checkBoxItem/checkBoxItemSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    [sideTableSlice.name]: sideTableSlice.reducer,\r\n    [graphViewTableSlice.name]: graphViewTableSlice.reducer,\r\n    [tableViewTableSlice.name]: tableViewTableSlice.reducer,\r\n    [addRowButtonSlice.name]: addRowButtonSlice.reducer,\r\n    dropDown: dropDownReducer,\r\n    navBar: navBarReducer,\r\n    checkBoxItem: checkBoxItemReducer,\r\n\r\n  },\r\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\r\n);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"CheckBoxItem_checkbox__o_FqR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropbtn\":\"NavBar_dropbtn__2d-lE\",\"dropdown\":\"NavBar_dropdown__1fF_4\",\"dropdown-content\":\"NavBar_dropdown-content__1z1WN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropbtn\":\"DropDown_dropbtn__2vX20\",\"dropdown\":\"DropDown_dropdown__2__SG\",\"dropdown-content\":\"DropDown_dropdown-content__1urJY\"};"],"sourceRoot":""}